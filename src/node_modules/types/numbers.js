/** General types */

exports.doublebe = createFastStub(8, 'writeDoubleBE', 'readDoubleBE')
exports.doublele = createFastStub(8, 'writeDoubleLE', 'readDoubleLE')
exports.floatbe = createFastStub(4, 'writeFloatBE', 'readFloatBE')
exports.floatle = createFastStub(4, 'writeFloatLE', 'readFloatLE')
exports.int8 = createFastStub(1, 'writeInt8', 'readInt8')
exports.uint8 = createFastStub(1, 'writeUInt8', 'readUInt8')
exports.int16be = createFastStub(2, 'writeInt16BE', 'readInt16BE')
exports.uint16be = createFastStub(2, 'writeUInt16BE', 'readUInt16BE')
exports.int16le = createFastStub(2, 'writeInt16LE', 'readInt16LE')
exports.uint16le = createFastStub(2, 'writeUInt16LE', 'readUInt16LE')
exports.int32be = createFastStub(4, 'writeInt32BE', 'readInt32BE')
exports.uint32be = createFastStub(4, 'writeUInt32BE', 'readUInt32BE')
exports.int32le = createFastStub(4, 'writeInt32LE', 'readInt32LE')
exports.uint32le = createFastStub(4, 'writeUInt32LE', 'readUInt32LE')

/** Secondary types */

exports.int24be = createFastStubGeneric(3, 'writeIntBE', 'readIntBE')
exports.uint24be = createFastStubGeneric(3, 'writeUIntBE', 'readUIntBE')
exports.int24le = createFastStubGeneric(3, 'writeIntLE', 'readIntLE')
exports.uint24le = createFastStubGeneric(3, 'writeUIntLE', 'readUIntLE')

exports.int40be = createFastStubGeneric(5, 'writeIntBE', 'readIntBE')
exports.uint40be = createFastStubGeneric(5, 'writeUIntBE', 'readUIntBE')
exports.int40le = createFastStubGeneric(5, 'writeIntLE', 'readIntLE')
exports.uint40le = createFastStubGeneric(5, 'writeUIntLE', 'readUIntLE')

exports.int48be = createFastStubGeneric(6, 'writeIntBE', 'readIntBE')
exports.uint48be = createFastStubGeneric(6, 'writeUIntBE', 'readUIntBE')
exports.int48le = createFastStubGeneric(6, 'writeIntLE', 'readIntLE')
exports.uint48le = createFastStubGeneric(6, 'writeUIntLE', 'readUIntLE')

function createFastStub(size, write, read) {
  return {
    encodingLength: () => size,
    encode: function encode(value, wstream) {
      wstream[write](value)
      encode.bytes = size
    },
    decode: createDecode(size, read),
  }
}

function createFastStubGeneric(size, write, read) {
  return {
    encodingLength: () => size,
    encode: function encode(value, wstream) {
      wstream[write](value, size)
      encode.bytes = size
    },
    decode: createDecodeGeneric(size, read),
  }
}

function createDecode(size, method) {
  const body = `decode.bytes = ${size}; return rstream.${method}();`
  return generateFunction('decode', body, 'rstream')
}

function createDecodeGeneric(size, method) {
  const body = `decode.bytes = ${size}; return rstream.${method}(${size});`
  return generateFunction('decode', body, 'rstream')
}

function generateFunction(name, body, args) {
  // eslint-disable-next-line no-new-func
  return new Function(`return (function ${name}(${args}) { ${body} })`)()
}
