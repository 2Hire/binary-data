const { isType, isFunction, isUserType } = require('lib/util')
const symbols = require('internal/symbols')
const { decodeCommon } = require('lib/decode')
const encodeCommon = require('lib/encode')
const Metadata = require('internal/meta')

module.exports = when

function when(condition, type) {
  if (!isType(type) && !isUserType(type)) {
    throw new TypeError('Argument #2 should be a valid type.')
  }

  const result = {
    encode,
    decode,
    encodingLength,
    [symbols.skip]: false,
  }

  return result

  function encode(value, wstream, context) {
    encode.bytes = 0
    encode.status = false

    encode.status = isFunction(condition)
      ? Boolean(condition(context))
      : Boolean(condition)

    if (!encode.status) {
      return
    }

    encodeCommon(value, wstream, type)
    encode.bytes += encodeCommon.bytes
  }

  function decode(rstream) {
    // eslint-disable-next-line no-invalid-this
    const context = Metadata.clone(this)
    decode.bytes = 0

    const status = isFunction(condition)
      ? Boolean(condition(context))
      : Boolean(condition)

    result[symbols.skip] = !status

    if (!status) {
      return
    }

    const value = decodeCommon(rstream, type, context)

    decode.bytes = context.bytes
    Metadata.clean(context)

    return value
  }

  function encodingLength(value) {
    return type.encodingLength(value)
  }
}
