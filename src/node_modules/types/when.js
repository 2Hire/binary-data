const { isType, isFunction, isUserType } = require('lib/util')
const symbols = require('internal/symbols')
const { decodeCommon } = require('lib/decode')
const encodeCommon = require('lib/encode')

module.exports = when

function when(condition, type) {
  if (!isType(type) && !isUserType(type)) {
    throw new TypeError('Argument #2 should be a valid type.')
  }

  const result = {
    encode,
    decode,
    encodingLength,
    [symbols.skip]: false,
  }

  return result

  function encode(value, wstream, context) {
    encode.bytes = 0
    encode.status = false

    encode.status = isFunction(condition)
      ? Boolean(condition(context))
      : Boolean(condition)

    if (!encode.status) {
      return
    }

    encodeCommon(value, wstream, type)
    encode.bytes += encodeCommon.bytes
  }

  function decode(rstream, meta) {
    const status = isFunction(condition)
      ? Boolean(condition(meta.context))
      : Boolean(condition)

    result[symbols.skip] = !status

    if (!status) {
      return
    }

    return decodeCommon(rstream, type, meta)
  }

  function encodingLength(value) {
    return type.encodingLength(value)
  }
}
