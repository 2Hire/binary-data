const { isType, isFunction } = require('lib/util')
const symbols = require('internal/symbols')

module.exports = when

function when(condition, type) {
  if (!isType(type)) {
    throw new Error('Argument #2 should be a valid type.')
  }

  const result = {
    encode,
    decode,
    encodingLength,
    [symbols.skip]: false
  }

  return result

  function encode(value, wstream, context) {
    encode.bytes = 0
    encode.status = false

    encode.status = isFunction(condition) ? Boolean(condition(context)) : Boolean(condition)

    if (!encode.status) {
      return
    }

    type.encode(value, wstream, context)
    encode.bytes += type.encode.bytes
  }

  function decode(rstream, meta) {
    const status = isFunction(condition) ? Boolean(condition(meta.context)) : Boolean(condition)

    result[symbols.skip] = !status

    if (!status) {
      return
    }

    return type.decode(rstream, meta)
  }

  function encodingLength(value) {
    return type.encodingLength(value)
  }
}
