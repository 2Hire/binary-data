'use strict';

const createFunction = require('generate-function');
const AbstractStream = require('streams/abstract-stream');

/**
 * Encode stream.
 */
class EncodeStream extends AbstractStream {
  /**
   * @class EncodeStream
   * @param {Object} options
   */
  constructor(options = {}) {
    options.readableObjectMode = false;
    options.writableObjectMode = true;
    super(options);
  }

  /**
   * Write provided chunk to the stream.
   * @param {Buffer} chunk
   */
  writeBuffer(chunk) {
    this.append(chunk);
  }
}

const fixedMethods = [
  'writeDoubleBE',
  'writeDoubleLE',
  'writeFloatBE',
  'writeFloatLE',
  'writeInt32BE',
  'writeInt32LE',
  'writeUInt32BE',
  'writeUInt32LE',
  'writeInt16BE',
  'writeInt16LE',
  'writeUInt16BE',
  'writeUInt16LE',
  'writeInt8',
  'writeUInt8',
];

fixedMethods.forEach(method => {
  const gen = createFunction();

  gen(`
    function encodeStream_${method}(value) {
      this.buffer.${method}(value);
    }
  `);

  EncodeStream.prototype[method] = gen.toFunction();
});

const metaMethods = ['writeIntBE', 'writeIntLE', 'writeUIntBE', 'writeUIntLE'];

metaMethods.forEach(method => {
  const gen = createFunction();

  gen(`
    function encodeStream_${method}(value, size) {
      this.buffer.${method}(value, size);
    }
  `);

  EncodeStream.prototype[method] = gen.toFunction();
});

module.exports = EncodeStream;
