'use strict';

const { Transform } = require('stream');
const BufferList = require('internal/buffer-list');

const kstream = Symbol('stream');
const kbuffer = Symbol('buffer');

/**
 * Abstract Buffer stream.
 * Represent a part of BufferList API.
 */
module.exports = class AbstractStream extends Transform {
  /**
   * @class AbstractStream
   * @param {Object} options
   */
  constructor(options = {}) {
    super(options);

    this[kbuffer] = new BufferList();
    this[kstream] = options.schema;
  }

  /**
   * @returns {number}
   */
  get length() {
    return this.buffer.length;
  }

  /**
   * @returns {Object}
   */
  get schema() {
    return this[kstream];
  }

  /**
   * @returns {BufferList}
   */
  get buffer() {
    return this[kbuffer];
  }

  /**
   * @param {Buffer} buf
   */
  append(buf) {
    this.buffer.append(buf);
  }

  /**
   * @param {number} i
   * @returns {number}
   */
  get(i) {
    return this.buffer.get(i);
  }

  /**
   * @param {number} [start]
   * @param {number} [end]
   * @returns {Buffer}
   */
  slice(start, end) {
    return this.buffer.slice(start, end);
  }

  /**
   * @param {number} bytes
   */
  consume(bytes) {
    this.buffer.consume(bytes);
  }

  /**
   * @param {string} encoding
   * @param {number} [start]
   * @param {number} [end]
   * @returns {string}
   */
  toString(encoding, start, end) {
    return this.buffer.toString(encoding, start, end);
  }
};
